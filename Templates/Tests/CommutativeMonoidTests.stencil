import XCTest
@testable import Abstract
import SwiftCheck

{% set protocolName %}CommutativeMonoid{% endset %}

final class {{ protocolName }}Tests: XCTestCase {
{% for type in types.implementing.CommutativeMonoid where not type.annotations.ignore|contains:protocolName and not type.kind == "protocol" %}

	func test{{ type.name }}() {
{% if type.isGeneric or type.name == "Array" or type.name == "Optional" or type.name == "Set" %}
		property("{{ type.name }} is a {{ protocolName }}") <- forAll { (a: {{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>, b: {{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% else %}{% endif %}) in
			Law{% if type.annotations.requiredContextForPropertyBasedTests %}InContext{% else %}{% endif %}<{{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>>.isCommutative(a,b){% if type.annotations.requiredContextForPropertyBasedTests %}(context){% else %}{% endif %}
		}
{% else %}
		property("{{ type.name }} is a {{ protocolName }}") <- forAll { (a: {{ type.name }}, b: {{ type.name }}) in
			Law<{{ type.name }}>.isCommutative(a,b)
		}
{% endif %}
	}
{% endfor %}

{% for type in types.implementing.Semiring where not type.annotations.ignore|contains:protocolName and not type.kind == "protocol" %}

    func test{{ type.name }}() {
{% if type.isGeneric or type.name == "Array" or type.name == "Optional" or type.name == "Set" %}
        property("{{ type.name }} is a {{ protocolName }} in regard to the Additive operation") <- forAll { (a: {{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>, b: {{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% else %}{% endif %}) in
            Law{% if type.annotations.requiredContextForPropertyBasedTests %}InContext{% else %}{% endif %}<{{ type.name }}<{{ type.annotations.fixedTypesForPropertyBasedTests }}>>.isCommutative(a,b,<>+){% if type.annotations.requiredContextForPropertyBasedTests %}(context){% else %}{% endif %}
        }
{% else %}
        property("{{ type.name }} is a {{ protocolName }} in regard to the Additive operation") <- forAll { (a: {{ type.name }}, b: {{ type.name }}) in
            Law<{{ type.name }}>.isCommutative(a,b,<>+)
        }
{% endif %}
    }
{% endfor %}


	static var allTests = [
{% for type in types.implementing.CommutativeMonoid where not type.annotations.ignore|contains:protocolName and not type.kind == "protocol" %}
		("test{{ type.name }}",test{{ type.name }}),
{% endfor %}
{% for type in types.implementing.Semiring where not type.annotations.ignore|contains:protocolName and not type.kind == "protocol" %}
        ("test{{ type.name }}",test{{ type.name }}),
{% endfor %}
	]
}
